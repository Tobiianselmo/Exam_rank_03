GET_NEXT_LINE EXAM RANK 03:

PASOS:

1: declearar el BUFFER_SIZE arriba del todo y las 5 variables, 
las cuales hay una 'static' que tiene el
tama√±o del [BUFFER_SIZE + 1], luego dos 'char *' y dos int.

2: Duplicamos line(char *) con el strdup y le enviamos la variable 'static'

3: hacemos el bucle en el cual vamos a iterar mientras no encuentre el '\n'
y mientras la cantidad de caracteres que retorne el read sea '!= 0'.
Y dentro del bucle vamos a asignarle el '\0' a la 'static' en la posicion
la cual queda el contador del read.
y vamos joineando line con la 'static'.

4: Si el STRLEN de la linea joineada al final del bucle es '0'
liberamos la linea y retornamos NULL.

5: si New_line(el char * que vamos a ir igualando al ft_strchr en el bucle)
existe, entonces al int to_copy le igualamos
       "New_line - line + 1"
(la diferencia de ambos mas el nulo)
y llamamos a la funcion ft_strcpy(buf'static', New_line + 1);

si New_line no exite, en ese caso lo que vamos a hacer es el to_copy
igualarlo al ft_strlen(line) y al buf'static' le asignamos el '\0' en la pos '0'.

6: Por ultimo a line en posicion to_copy le asignamos el '\0' y luego
lo retornamos.


FUNCIONES:

1-ft_strchr(retorna el string si encuentra el caracter, sino NULL)
2-ft_strlen(para los malloc de ft_strdup y de ft_strjoin)
3-ft_strcpy(para copiar en el ft_strdup y ft_strjoin)
4-ft_strdup(usa el ft_strcpy y retorna el string nuevo)
5-ft_strjoin(usa el ft_strcpy para copiar ambos strings en el string creado y libera el s1)
